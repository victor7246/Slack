/**
 * Redsift SDK. Sift Storage module.
 * Based on APIs from https://github.com/CrowdProcess/riak-pb
 *
 * Copyright (c) 2016 Redsift Limited. All rights reserved.
 */
import loglevel from 'loglevel';
import {
  opCreateDb,
  opCursor,
  opDeleteDatabase,
  opDel,
  opPut,
  opGet,
  opGetAll,
  opGetAllKeys,
  opGetIndex,
  opGetIndexKeys,
  opGetWithIndex
} from './operations';

let _siftGuid = new WeakMap();
let _dbs = new WeakMap();

export class Storage {
  constructor(dbInfo, ll) {
    this._logger = loglevel.getLogger('RSStorage');
    this._logger.setLevel(ll || 'warn');
    if (!dbInfo.accountGuid) {
      throw new Error('[Storage]: dbInfo.accountGuid undefined');
    }
    _siftGuid.set(this, dbInfo.siftGuid);
    _dbs.set(this, opCreateDb(dbInfo));
  }

  /*****************************************************************
   * External Operations
   *****************************************************************/
  get(params) {
    this._logger.trace('[Storage::get]: ', params);
    return opGet(_dbs.get(this), params, _siftGuid.get(this));
  }

  getAll(params) {
    this._logger.trace('[Storage::getAll]: ', params);
    return opGetAll(_dbs.get(this), params, _siftGuid.get(this));
  }

  getAllKeys(params) {
    this._logger.trace('[Storage::getAllKeys]: ', params);
    return opGetAllKeys(_dbs.get(this), params, _siftGuid.get(this))
  }

  getIndex(params) {
    this._logger.trace('[Storage::getIndex]: ', params);
    return opGetIndex(_dbs.get(this), params, _siftGuid.get(this));
  }

  getIndexKeys(params) {
    this._logger.trace('[Storage::getIndexKeys]: ', params);
    return opGetIndexKeys(_dbs.get(this), params, _siftGuid.get(this));
  }

  getWithIndex(params) {
    this._logger.trace('[Storage::getWithIndex]: ', params);
    return opGetWithIndex(_dbs.get(this), params, _siftGuid.get(this));
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////
  // Sift-only operations
  ///////////////////////////////////////////////////////////////////////////////////////////////
  delUser(params) {
    params.bucket = '_user.default';
    this._logger.trace('[Storage::delUser]: ', params);
    return opDel(_dbs.get(this), params, _siftGuid.get(this));
  }

  getUser(params) {
    params.bucket = '_user.default';
    this._logger.trace('[Storage::getUser]: ', params);
    return opGet(_dbs.get(this), params, _siftGuid.get(this));
  }

  putUser(params) {
    params.bucket = '_user.default';
    this._logger.trace('[Storage::putUser]: ', params);
    if (!params.kvs || params.kvs.length === 0) {
      return Promise.reject('[Storage::putUser]: params.kvs undefined');
    }
    return opPut(_dbs.get(this), params, false, _siftGuid.get(this));
  }

}


/*****************************************************************
 * Internal Operations
 *****************************************************************/
export class InternalStorage extends Storage {
  constructor(dbInfo, ll) {
    super(dbInfo, ll);
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////
  // NOTE: Overloads required so internal storage message database can access data for all sifts
  ///////////////////////////////////////////////////////////////////////////////////////////////
  get(params, siftGuid) {
    this._logger.trace('[InternalStorage::get]: ', params, siftGuid);
    return opGet(_dbs.get(this), params, siftGuid || _siftGuid.get(this));
  }

  getAll(params, siftGuid) {
    this._logger.trace('[InternalStorage::getAll]: ', params, siftGuid);
    return opGetAll(_dbs.get(this), params, siftGuid || _siftGuid.get(this));
  }

  getAllKeys(params, siftGuid) {
    this._logger.trace('[InternalStorage::getAllKeys]: ', params, siftGuid);
    return opGetAllKeys(_dbs.get(this), params, siftGuid || _siftGuid.get(this))
  }

  getIndex(params, siftGuid) {
    this._logger.trace('[InternalStorage::getIndex]: ', params, siftGuid);
    return opGetIndex(_dbs.get(this), params, siftGuid || _siftGuid.get(this));
  }

  getIndexKeys(params, siftGuid) {
    this._logger.trace('[InternalStorage::getIndexKeys]: ', params, siftGuid);
    return opGetIndexKeys(_dbs.get(this), params, siftGuid || _siftGuid.get(this));
  }

  getWithIndex(params, siftGuid) {
    this._logger.trace('[InternalStorage::getWithIndex]: ', params, siftGuid);
    return opGetWithIndex(_dbs.get(this), params, siftGuid || _siftGuid.get(this));
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////
  // InternalStorage-only operations
  ///////////////////////////////////////////////////////////////////////////////////////////////

  cursor(params, done) {
    this._logger.trace('[InternalStorage::cursor]: ', params);
    opCursor(_dbs.get(this).db, params, done);
  }

  del(params, siftGuid) {
    this._logger.trace('[InternalStorage::del]: ', params, siftGuid);
    return opDel(_dbs.get(this), params, siftGuid || _siftGuid.get(this));
  }

  deleteDatabase() {
    this._logger.trace('[InternalStorage::deleteDatabase]');
    return opDeleteDatabase(_dbs.get(this).db);
  }

  getDbs() {
    return _dbs.get(this);
  }

  put(params, raw, siftGuid) {
    this._logger.trace('[InternalStorage::put]: ', params, raw, siftGuid);
    return opPut(_dbs.get(this), params, raw, siftGuid || _siftGuid.get(this));
  }

}
