(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.Observable = factory());
}(this, (function () { 'use strict';

/**
 * Observable pattern implementation.
 * Supports topics as String or an Array.
 */
var Observable = function Observable() {
  this._observers = [];
};

Observable.prototype.subscribe = function subscribe (topic, observer) {
  this._op('_sub', topic, observer);
};

Observable.prototype.unsubscribe = function unsubscribe (topic, observer) {
  this._op('_unsub', topic, observer);
};

Observable.prototype.unsubscribeAll = function unsubscribeAll (topic) {
  if (!this._observers[topic]) {
    return;
  }
  delete this._observers[topic];
};

Observable.prototype.publish = function publish (topic, message) {
  this._op('_pub', topic, message);
};

/**
 * Internal methods
 */
Observable.prototype._op = function _op (op, topic, value) {
    var this$1 = this;

  if (Array.isArray(topic)) {
    topic.forEach(function (t) {
      this$1[op](t, value);
    });
  }
  else {
    this[op](topic, value);
  }
};

Observable.prototype._sub = function _sub (topic, observer) {
  this._observers[topic] || (this._observers[topic] = []);
  if(observer && this._observers[topic].indexOf(observer) === -1) {
    this._observers[topic].push(observer);
  }
};

Observable.prototype._unsub = function _unsub (topic, observer) {
  if (!this._observers[topic]) {
    return;
  }
  var index = this._observers[topic].indexOf(observer);
  if (~index) {
    this._observers[topic].splice(index, 1);
  }
};

Observable.prototype._pub = function _pub (topic, message) {
    var this$1 = this;

  if (!this._observers[topic]) {
    return;
  }
  for (var i = this._observers[topic].length - 1; i >= 0; i--) {
    this$1._observers[topic][i](message)
  }
};

return Observable;

})));