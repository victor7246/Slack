/* globals after, afterEach, before, beforeEach, describe, it, Promise */
var RSStorage = require('../dist/js/rs-storage.umd-es2015.js');
var siftStorage1, siftStorage2, internalStorage1, internalStorage2;

console.log('executing tests...');

before(function (done) {
  console.log('pre-tests cleanup...');
  window.indexedDB.webkitGetDatabaseNames().onsuccess = function (sender, args) {
    var r = sender.target.result;
    var dbCount = r.length;
    console.log('found: ', dbCount);
    if(dbCount === 0) {
      done();
    }
    else {
      for (var k = 0; k < r.length; k++) {
        var req = indexedDB.deleteDatabase(r[k]);
        console.log('deleting: ', r[k]);
        req.onsuccess = function () {
          dbCount--;
          console.log('dbCount: ', dbCount);
          if(dbCount === 0) {
            done();
          }
        };
        req.onerror = function (e) {
          done('error deleting db');
        };
        req.onblocked = function (e) {
          done('error deleting db');
        };
      }
    }
  };
});

describe('unit tests', function () {
  console.log('api tests');
  before(function (done) {
    console.log('setup...creating db');

    var db1 = {
      type: 'SIFT',
      siftGuid: 'testsift',
      accountGuid: 'testuser',
      schema: [
        { name: 'standard' },
        { name: 'with-keypath' },
        { name: 'with-one-index', indexes: ['indexone'] },
        { name: 'with-two-indexes', indexes: ['indexone', 'indextwo'] }
      ]};

    var db2 = {
      type: 'SIFT',
      siftGuid: 'testsiftOther',
      accountGuid: 'testuser',
      schema: [
        { name: 'standard' }
      ]};

    siftStorage1 = new RSStorage.Storage(db1, 'trace');
    internalStorage1 = new RSStorage.InternalStorage(db1, 'trace');

    siftStorage2 = new RSStorage.Storage(db2, 'trace');
    internalStorage2 = new RSStorage.InternalStorage(db2, 'trace');

    done();
  });

  describe('#put-and-delete()', function() {
    var kvs = [{ key: 'k1', value: 'v1' }];
    var keys = ['k1'];
    it('create record', function() {
      return internalStorage1.put({ bucket: 'standard', kvs: kvs}).should.be.fulfilled;
    });
    it('verify record', function() {
      return Promise.all([
        siftStorage1.get({ bucket: 'standard', keys: keys}).should.eventually.deep.equal([{key: 'k1', value: 'v1'}]),
        internalStorage1.get({ bucket: 'standard', keys: keys}).should.eventually.deep.equal([{key: 'k1', value: 'v1'}])
      ]);
    });

    it('delete record', function () {
      return internalStorage1.del({ bucket: 'standard', keys: keys }).should.be.fulfilled;
    });
    it('verify deletion', function () {
      return Promise.all([
        siftStorage1.get({ bucket: 'standard', keys: keys }).should.eventually.deep.equal([{key: 'k1', value: undefined}]),
        internalStorage1.get({ bucket: 'standard', keys: keys }).should.eventually.deep.equal([{key: 'k1', value: undefined}])
      ]);
    });
  });


  describe('#multiple-put-and-delete()', function() {
    var kvs = [{ key: 'k1', value: 'v1' }, { key: 'k2', value: 'v2' }, { key: 'k3', value: 'v3' }];
    var keys = ['k1', 'k2', 'k3'];
    it('create records', function() {
      return internalStorage1.put({ bucket: 'standard', kvs: kvs}).should.be.fulfilled;
    });
    it('verify records', function() {
      return siftStorage1.get({ bucket: 'standard', keys: keys}).should.eventually.deep.equal(kvs);
    });
    it('verify records + undefined keys', function() {
      var ukeys = keys.slice();
      ukeys.unshift('k0');
      ukeys.push('k4');
      var ukvs = kvs.slice();
      ukvs.unshift({key: 'k0', value: undefined});
      ukvs.push({key: 'k4', value: undefined});
      return siftStorage1.get({ bucket: 'standard', keys: ukeys}).should.eventually.deep.equal(ukvs);
    });
    it('delete records', function () {
      return internalStorage1.del({ bucket: 'standard', keys: keys }).should.be.fulfilled;
    });
    it('verify deletion', function () {
      return siftStorage1.get({ bucket: 'standard', keys: keys }).should.eventually.deep.equal([{key: 'k1', value: undefined}, {key: 'k2', value: undefined}, {key: 'k3', value: undefined}]);
    });
  });

  describe('#get()', function() {
    it('verify records', function() {
      return Promise.all([
        siftStorage1.get({ bucket: 'standard', keys: []}).should.eventually.deep.equal([]),
        siftStorage1.get({ bucket: 'standard'}).should.be.rejected,
        internalStorage1.get({ bucket: 'standard', keys: []}).should.eventually.deep.equal([]),
        internalStorage1.get({ bucket: 'standard'}).should.be.rejected
      ]);
    });
  });

  describe('#getAll()', function() {
    var kvs = [{ key: 'k1', value: 'v1' }, { key: 'k2', value: 'v2' }, { key: 'k3', value: 'v3' }];
    it('create records', function() {
      return internalStorage1.put({ bucket: 'standard', kvs: kvs}).should.be.fulfilled;
    });
    it('verify records', function() {
      return Promise.all([
        siftStorage1.getAllKeys({ bucket: 'standard'}).should.eventually.deep.equal(['k1', 'k2', 'k3']),
        siftStorage1.getAll({ bucket: 'standard'}).should.eventually.deep.equal(kvs),
        internalStorage1.getAllKeys({ bucket: 'standard'}).should.eventually.deep.equal(['k1', 'k2', 'k3']),
        internalStorage1.getAll({ bucket: 'standard'}).should.eventually.deep.equal(kvs)
      ]);
    });
  });

  describe('#getAll({bucket: _email.tid})', function() {
    it('create record', function() {
      var kvs1 = [{ key: 'k1', value: {sift: {guid: 'testsift' }, value: 'v1' } }],
          kvs2 = [{ key: 'k2', value: {sift: {guid: 'testsiftOther'}, value: 'v2' } }];
      return Promise.all([
        internalStorage1.put({ bucket: '_email.tid', kvs: kvs1 }, true).should.be.fulfilled,
        internalStorage2.put({ bucket: '_email.tid', kvs: kvs2 }, true).should.be.fulfilled
      ])
    });
    it('verify records', function () {
      return Promise.all([
        siftStorage1.getAllKeys({ bucket: '_email.tid'}).should.eventually.deep.equal(['k1']),
        siftStorage2.getAllKeys({ bucket: '_email.tid'}).should.eventually.deep.equal(['k2']),
        siftStorage1.getAll({ bucket: '_email.tid'}).should.eventually.deep.equal([{key: 'k1', value:'v1'}]),
        siftStorage2.getAll({ bucket: '_email.tid'}).should.eventually.deep.equal([{key: 'k2', value:'v2'}])
      ]);
    });
  });

  describe('#getWithIndex()', function() {
    it('create records with index', function() {
      return internalStorage1.put({ bucket: 'with-one-index', kvs: [{ key: 'k1', value: {twoI: {indexone: 'i1'}, value: 'v1' }}, { key: 'k2', value: {twoI: {indexone: 'i1'}, value: 'v2' }}] }, true).should.be.fulfilled;
    });
    it('verify index records', function() {
      return Promise.all([
        siftStorage1.getWithIndex({bucket: 'with-one-index', index: 'indexone', range: 'i1', keys: ['k1']}).should.eventually.deep.equal([{key: 'k1', value: 'v1'}]),
        internalStorage1.getWithIndex({bucket: 'with-one-index', index: 'indexone', range: 'i1', keys: ['k1']}).should.eventually.deep.equal([{key: 'k1', value: 'v1'}])
      ]);
    });
  });

  describe('#putUser()', function() {
    var kvs = [{ key: 'k1', value: 'v1' }, { key: 'k2', value: 'v2' }, { key: 'k3', value: 'v3' }];
    it('create records', function() {
      return siftStorage1.putUser({kvs: kvs}).should.be.fulfilled;
    });
    it('verify records', function() {
      return Promise.all([
        siftStorage1.getUser({ bucket: 'nonexistent', keys: ['k1', 'k2', 'k3'] }).should.eventually.deep.equal(kvs)
      ]);
    });
  });

  describe('get index()', function() {
    it('create record with index', function() {
      return internalStorage1.put({ bucket: 'with-one-index', kvs: [{ key: 'k1', value: {twoI: {indexone: 'i1'}, value: 'v1' }}, { key: 'k2', value: {twoI: {indexone: 'i1'}, value: 'v2' }}] }, true).should.be.fulfilled;
    });
    it('verify index record', function() {
      return Promise.all([
        siftStorage1.getIndexKeys({ bucket: 'with-one-index', index: 'indexone' }).should.eventually.deep.equal([{key: 'k1', index: 'i1'}, {key: 'k2', index: 'i1'}]),
        siftStorage1.getIndex({ bucket: 'with-one-index', index: 'indexone' }).should.eventually.deep.equal([{key: 'k1', index: 'i1', value: 'v1'}, {key: 'k2', index: 'i1', value: 'v2'}]),
        internalStorage1.getIndexKeys({ bucket: 'with-one-index', index: 'indexone' }).should.eventually.deep.equal([{key: 'k1', index: 'i1'}, {key: 'k2', index: 'i1'}]),
        internalStorage1.getIndex({ bucket: 'with-one-index', index: 'indexone' }).should.eventually.deep.equal([{key: 'k1', index: 'i1', value: 'v1'}, {key: 'k2', index: 'i1', value: 'v2'}])
      ]);
    });
  });

  describe('#get-index-values()', function() {
    it('create records with index', function() {
      return internalStorage1.put({ bucket: 'with-one-index', kvs: [{ key: 'k1', value: {twoI: {indexone: 'i1'}, value: 'v1' }}, { key: 'k2', value: {twoI: {indexone: 'i1'}, value: 'v2' }}] }, true).should.be.fulfilled;
    });
    it('verify index records', function() {
      return Promise.all([
        siftStorage1.getIndexKeys({ bucket: 'with-one-index', index: 'indexone', range: {eq: 'i1'} }).should.eventually.deep.equal([{key: 'k1', index: 'i1'}, {key: 'k2', index: 'i1'}]),
        siftStorage1.getIndex({ bucket: 'with-one-index', index: 'indexone' }).should.eventually.deep.equal([{key: 'k1', index: 'i1', value: 'v1'}, {key: 'k2', index: 'i1', value: 'v2'}]),
        internalStorage1.getIndexKeys({ bucket: 'with-one-index', index: 'indexone', range: {eq: 'i1'} }).should.eventually.deep.equal([{key: 'k1', index: 'i1'}, {key: 'k2', index: 'i1'}]),
        internalStorage1.getIndex({ bucket: 'with-one-index', index: 'indexone' }).should.eventually.deep.equal([{key: 'k1', index: 'i1', value: 'v1'}, {key: 'k2', index: 'i1', value: 'v2'}])
      ]);
    });
  });

  describe('#get-index range()', function() {
    it('create record', function() {
      return internalStorage1.put({ bucket: 'with-one-index', kvs: [{ key: 'k1', value: {twoI: {indexone: 'i1'}, value: 'v1' }}, { key: 'k2', value: {twoI: {indexone: 'i2'}, value: 'v2' }}] }, true).should.be.fulfilled;
    });
    it('verify no range (all)', function() {
      return Promise.all([
        siftStorage1.getIndexKeys({ bucket: 'with-one-index', index: 'indexone' }).should.eventually.deep.equal([{key: 'k1', index: 'i1'}, {key: 'k2', index: 'i2'}]),
        siftStorage1.getIndex({ bucket: 'with-one-index', index: 'indexone' }).should.eventually.deep.equal([{key: 'k1', index: 'i1', value: 'v1'}, {key: 'k2', index: 'i2', value: 'v2'}])
      ]);
    });
    it('verify gte-lte range key', function() {
      return Promise.all([
        siftStorage1.getIndexKeys({ bucket: 'with-one-index', index: 'indexone', range: {gte: 'i1', lte: 'i2'} }).should.eventually.deep.equal([{key: 'k1', index: 'i1'}, {key: 'k2', index: 'i2'}]),
        siftStorage1.getIndex({ bucket: 'with-one-index', index: 'indexone', range: {gte: 'i1', lte: 'i2'} }).should.eventually.deep.equal([{key: 'k1', index: 'i1', value: 'v1'}, {key: 'k2', index: 'i2', value: 'v2'}])
      ]);
    });
    it('verify gte range', function() {
      return Promise.all([
        siftStorage1.getIndexKeys({ bucket: 'with-one-index', index: 'indexone', range: {gte: 'i1'} }).should.eventually.deep.equal([{key: 'k1', index: 'i1'}, {key: 'k2', index: 'i2'}]),
        siftStorage1.getIndex({ bucket: 'with-one-index', index: 'indexone', range: {gte: 'i1'} }).should.eventually.deep.equal([{key: 'k1', index: 'i1', value: 'v1'}, {key: 'k2', index: 'i2', value: 'v2'}])
      ]);
    });
    it('verify gte i2 range', function() {
      return Promise.all([
        siftStorage1.getIndexKeys({ bucket: 'with-one-index', index: 'indexone', range: {gte: 'i2'} }).should.eventually.deep.equal([{key: 'k2', index: 'i2'}]),
        siftStorage1.getIndex({ bucket: 'with-one-index', index: 'indexone', range: {gte: 'i2'} }).should.eventually.deep.equal([{key: 'k2', index: 'i2', value: 'v2'}])
      ]);
    });
    it('verify lte i1 range', function() {
      return Promise.all([
        siftStorage1.getIndexKeys({ bucket: 'with-one-index', index: 'indexone', range: {lte: 'i1'} }).should.eventually.deep.equal([{key: 'k1', index: 'i1'}]),
        siftStorage1.getIndex({ bucket: 'with-one-index', index: 'indexone', range: {lte: 'i1'} }).should.eventually.deep.equal([{key: 'k1', index: 'i1', value: 'v1'}])
      ]);
    });
    it('verify lt i1 range', function() {
      return Promise.all([
        siftStorage1.getIndexKeys({ bucket: 'with-one-index', index: 'indexone', range: {lt: 'i1'} }).should.eventually.deep.equal([]),
        siftStorage1.getIndex({ bucket: 'with-one-index', index: 'indexone', range: {lt: 'i1'} }).should.eventually.deep.equal([])
      ]);
    });
    it('verify gt i2 range', function() {
      return Promise.all([
        siftStorage1.getIndexKeys({ bucket: 'with-one-index', index: 'indexone', range: {gt: 'i2'} }).should.eventually.deep.equal([]),
        siftStorage1.getIndex({ bucket: 'with-one-index', index: 'indexone', range: {gt: 'i2'} }).should.eventually.deep.equal([])
      ]);
    });
  });

  describe('#put-multiple-index range()', function() {
    it('create record', function() {
      return internalStorage1.put({ bucket: 'with-two-indexes', kvs: [{ key: 'k1', value: {twoI: {indexone: 'i1', indextwo:'i2'}, value: 'v1' }}] }, true).should.be.fulfilled;
    });
    it('verify indexone and indextwo', function () {
      Promise.all([
        siftStorage1.getIndexKeys({ bucket: 'with-two-indexes', index: 'indexone', range: {eq: 'i1'} }).should.eventually.deep.equal([{key: 'k1', index: 'i1'}]),
        siftStorage1.getIndex({ bucket: 'with-two-indexes', index: 'indexone', range: {gte: 'i1'} }).should.eventually.deep.equal([{key: 'k1', index: 'i1', value: 'v1'}]),
        siftStorage1.getIndexKeys({ bucket: 'with-two-indexes', index: 'indextwo', range: {eq: 'i2'} }).should.eventually.deep.equal([{key: 'k1', index: 'i2'}]),
        siftStorage1.getIndex({ bucket: 'with-two-indexes', index: 'indextwo', range: {lte: 'i2'} }).should.eventually.deep.equal([{key: 'k1', index: 'i2', value: 'v1'}])
      ]);
    });
  });

  after(function (done) {
    console.log('teardown...deleting db');
    return internalStorage1.deleteDatabase().then(function () {
      done();
    }).catch(function (err) {
      done(err);
    });
  });

});
