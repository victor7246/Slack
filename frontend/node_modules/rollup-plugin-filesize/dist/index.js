'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fileSize = _interopDefault(require('filesize'));
var boxen = _interopDefault(require('boxen'));
var chalk = _interopDefault(require('chalk'));
var deepAssign = _interopDefault(require('deep-assign'));
var gzip = _interopDefault(require('gzip-size'));

function render(opt, size, gzip$$1) {
	return opt.theme == 'dark' ? boxen(chalk.green.bold('Bundle size: ') + chalk.yellow.bold(size) + ', ' + chalk.green.bold('Gzipped size: ') + chalk.yellow.bold(gzip$$1), { padding: 1 }) : boxen(chalk.black.bold('Bundle size: ') + chalk.blue.bold(size) + ', ' + chalk.black.bold('Gzipped size: ') + chalk.blue.bold(gzip$$1), { padding: 1 });
}

function filesize() {
	var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];


	var defaultOptions = {
		format: {},
		theme: 'dark',
		render: render
	};

	var opts = deepAssign({}, defaultOptions, options);
	if (options.render) {
		opts.render = options.render;
	}

	return {
		getData: function getData(code) {
			var size = fileSize(Buffer.byteLength(code), opts.format);
			var gzipSize = fileSize(gzip.sync(code), opts.format);
			return opts.render(opts, size, gzipSize);
		},
		ongenerate: function ongenerate(bundle, _ref) {
			var code = _ref.code;

			console.log(this.getData(code));
		}
	};
}

module.exports = filesize;
